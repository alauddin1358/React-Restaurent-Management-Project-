[{"F:\\Coursera\\React\\my-app\\src\\index.js":"1","F:\\Coursera\\React\\my-app\\src\\serviceWorker.js":"2","F:\\Coursera\\React\\my-app\\src\\App.js":"3","F:\\Coursera\\React\\my-app\\src\\components\\MainComponent.js":"4","F:\\Coursera\\React\\my-app\\src\\redux\\configureStore.js":"5","F:\\Coursera\\React\\my-app\\src\\components\\ContactComponent.js":"6","F:\\Coursera\\React\\my-app\\src\\components\\HomeComponent.js":"7","F:\\Coursera\\React\\my-app\\src\\components\\DishdetailComponent.js":"8","F:\\Coursera\\React\\my-app\\src\\components\\MenuComponent.js":"9","F:\\Coursera\\React\\my-app\\src\\components\\HeaderComponent.js":"10","F:\\Coursera\\React\\my-app\\src\\redux\\dishes.js":"11","F:\\Coursera\\React\\my-app\\src\\components\\FooterComponent.js":"12","F:\\Coursera\\React\\my-app\\src\\redux\\leaders.js":"13","F:\\Coursera\\React\\my-app\\src\\redux\\forms.js":"14","F:\\Coursera\\React\\my-app\\src\\redux\\comments.js":"15","F:\\Coursera\\React\\my-app\\src\\redux\\promotions.js":"16","F:\\Coursera\\React\\my-app\\src\\redux\\ActionCreators.js":"17","F:\\Coursera\\React\\my-app\\src\\components\\AboutComponent.js":"18","F:\\Coursera\\React\\my-app\\src\\components\\LoadingComponent.js":"19","F:\\Coursera\\React\\my-app\\src\\redux\\ActionTypes.js":"20","F:\\Coursera\\React\\my-app\\src\\shared\\baseUrl.js":"21","F:\\Coursera\\React\\my-app\\src\\shared\\leaders.js":"22"},{"size":642,"mtime":1607013862874,"results":"23","hashOfConfig":"24"},{"size":5086,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":549,"mtime":1607225819198,"results":"26","hashOfConfig":"24"},{"size":4388,"mtime":1607502857903,"results":"27","hashOfConfig":"24"},{"size":804,"mtime":1607362313310,"results":"28","hashOfConfig":"24"},{"size":11167,"mtime":1607502857907,"results":"29","hashOfConfig":"24"},{"size":2172,"mtime":1607445695867,"results":"30","hashOfConfig":"24"},{"size":8609,"mtime":1607502857903,"results":"31","hashOfConfig":"24"},{"size":2174,"mtime":1607406230496,"results":"32","hashOfConfig":"24"},{"size":5196,"mtime":1607187919875,"results":"33","hashOfConfig":"24"},{"size":598,"mtime":1607359367115,"results":"34","hashOfConfig":"24"},{"size":2637,"mtime":1607013112252,"results":"35","hashOfConfig":"24"},{"size":603,"mtime":1607440609137,"results":"36","hashOfConfig":"24"},{"size":170,"mtime":1607502857903,"results":"37","hashOfConfig":"24"},{"size":539,"mtime":1607414579171,"results":"38","hashOfConfig":"24"},{"size":650,"mtime":1607408452101,"results":"39","hashOfConfig":"24"},{"size":6417,"mtime":1607451980917,"results":"40","hashOfConfig":"24"},{"size":5325,"mtime":1607451443569,"results":"41","hashOfConfig":"24"},{"size":256,"mtime":1607359870648,"results":"42","hashOfConfig":"24"},{"size":599,"mtime":1607440081955,"results":"43","hashOfConfig":"24"},{"size":48,"mtime":1607405770436,"results":"44","hashOfConfig":"24"},{"size":2382,"mtime":1607084852944,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"sw4yag",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Coursera\\React\\my-app\\src\\index.js",[],["94","95"],"F:\\Coursera\\React\\my-app\\src\\serviceWorker.js",[],"F:\\Coursera\\React\\my-app\\src\\App.js",[],"F:\\Coursera\\React\\my-app\\src\\components\\MainComponent.js",["96"],"import React, {Component} from 'react';\r\nimport Contact from './ContactComponent';\r\nimport Menu from './MenuComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Home from './HomeComponent';\r\nimport DishDetail from './DishdetailComponent';\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { postComment, postFeedback, fetchDishes, fetchComments, fetchPromos, fetchLeaders } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  postComment: (dishId, rating, author, comment) => dispatch(postComment(dishId, rating, author, comment)),\r\n  postFeedback: (firstname, lastname, telnum, email, agree, contactType, message) => dispatch(postFeedback(firstname, lastname, telnum, email, agree, contactType, message)),\r\n  fetchDishes: () => { dispatch(fetchDishes())},\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\r\n  fetchComments: () => dispatch(fetchComments()),\r\n  fetchPromos: () => dispatch(fetchPromos()),\r\n  fetchLeaders: () => dispatch(fetchLeaders())\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  }\r\n}\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchDishes();\r\n    this.props.fetchComments();\r\n    this.props.fetchPromos();\r\n    this.props.fetchLeaders();\r\n  }\r\n  \r\n  render() {\r\n    const HomePage = () => {\r\n      return(\r\n        <Home \r\n              dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n              dishesLoading={this.props.dishes.isLoading}\r\n              dishesErrMess={this.props.dishes.errMess}\r\n              promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n              promoLoading={this.props.promotions.isLoading}\r\n              promoErrMess={this.props.promotions.errMess}\r\n              leader={this.props.leaders.leaders.filter((leader) => leader.featured)[0]}\r\n              leaderLoading={this.props.leaders.isLoading}\r\n              leaderErrMess={this.props.leaders.errMess}\r\n          />\r\n      );\r\n    };\r\n\r\n    const DishWithId = ({match}) => {\r\n      //console.log(\"Calling Dish WithID\");\r\n      return(\r\n        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n            isLoading={this.props.dishes.isLoading}\r\n            errMess={this.props.dishes.errMess}\r\n            comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n            commentsErrMess={this.props.comments.errMess}\r\n            postComment={this.props.postComment} \r\n          />\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <TransitionGroup>\r\n            <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\r\n              <Switch location={this.props.location}>\r\n                  <Route path='/home' component={HomePage} />\r\n                  <Route exact path='/aboutus' component={() => <About leaders={this.props.leaders.leaders} \r\n                                                                       isLoading={this.props.leaders.isLoading}\r\n                                                                       errMess={this.props.leaders.errMess}\r\n                  />} />\r\n                  <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />\r\n                  <Route path='/menu/:dishId' component={DishWithId} />\r\n                  <Route exact path='/contactus' component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} \r\n                                                                            postFeedback={this.props.postFeedback}\r\n                                                                      />} />\r\n                  <Redirect to=\"/home\" />\r\n              </Switch>\r\n            </CSSTransition>\r\n          </TransitionGroup>\r\n        \r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","F:\\Coursera\\React\\my-app\\src\\redux\\configureStore.js",[],"F:\\Coursera\\React\\my-app\\src\\components\\ContactComponent.js",["97","98","99","100","101","102","103","104","105"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem,\r\n    Button, Row, Col, Label } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);    \r\n    }\r\n    handleSubmit(values) {\r\n        //console.log('Current State is: ' + JSON.stringify(values));\r\n        alert(' Thank you for your feedback! ' + JSON.stringify(values));\r\n        //this.props.postFeedback(values);\r\n        this.props.postFeedback(values.firstname, values.lastname, values.telnum, values.email, values.agree, values.contactType, values.message);\r\n        this.props.resetFeedbackForm();\r\n        // event.preventDefault();\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\" href=\"#\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                   <div className=\"col-12\">\r\n                      <h3>Send us your Feedback</h3>\r\n                   </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                    <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                                 /> {' '}\r\n                                                <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } \r\n}\r\nexport default Contact;","F:\\Coursera\\React\\my-app\\src\\components\\HomeComponent.js",[],"F:\\Coursera\\React\\my-app\\src\\components\\DishdetailComponent.js",["106","107","108","109"],"import React, { Component } from 'react'\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, Breadcrumb, BreadcrumbItem, Button, Row, Col, Label,\r\n    Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\r\n\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n        \r\n       this.toggleModal = this.toggleModal.bind(this);\r\n       this.handleComment = this.handleComment.bind(this);\r\n    };\r\n    toggleModal() {\r\n        this.setState({\r\n          isModalOpen: !this.state.isModalOpen\r\n        });\r\n     }\r\n     \r\n    handleComment(values) {\r\n        //console.log(\"Calling HandleComment\");\r\n        this.toggleModal(); \r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n    render() {\r\n        //console.log(\"Calling CommentForm\");\r\n        return(\r\n            <div className=\"container\">\r\n                <Button outline onClick={this.toggleModal}>    \r\n                    <span className=\"fa fa-pencil fa-lg mr-1\"></span> \r\n                        Submit Comment\r\n                </Button>\r\n                 <div className=\"row row-content\">\r\n                    <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}> \r\n                        <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                        <ModalBody>\r\n                            <LocalForm onSubmit={(values) => this.handleComment(values)}>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"rating\" md={6}>Rating</Label>\r\n                                    <Control.select model=\".rating\" name=\"rating\"\r\n                                        className=\"form-control mx-2\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"author\" md={6}>Your Name</Label>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                        placeholder=\"Your Name\"\r\n                                        className=\"form-control mx-2\"\r\n                                        validators={{\r\n                                            minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }} \r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger mx-2\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />  \r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"comment\" md={6}>Your Feedback</Label>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                        rows=\"6\"\r\n                                        className=\"form-control mx-2\" />\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Button type=\"submit\" color=\"primary\" className=\"mr-2\">\r\n                                        Submit\r\n                                    </Button>\r\n                               </Row>\r\n                            </LocalForm>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                 </div>             \r\n            </div>    \r\n        );\r\n    }\r\n}\r\n    function RenderDish({dish}) {\r\n        return(\r\n            <FadeTransform\r\n                in\r\n                transformProps={{\r\n                    exitTransform: 'scale(0.5) translateY(-50%)'\r\n                }}>\r\n                <Card>\r\n                    <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                        <CardText>{dish.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </FadeTransform>\r\n        );\r\n    }\r\n\r\n    function RenderComments({comments, postComment, dishId}) {\r\n        \r\n        if(comments != null) {\r\n            return(\r\n                <div>\r\n                    <h4>Comments</h4>\r\n                    <ul className=\"list-unstyled\">\r\n                        <Stagger in>\r\n                            {comments.map((comment) => {\r\n                                return (\r\n                                    <Fade in>\r\n                                        <li key={comment.id}>\r\n                                        <p>{comment.comment}</p>\r\n                                        <p>-- {comment.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                                        </li>\r\n                                    </Fade>\r\n                                );\r\n                            })}\r\n                         </Stagger>\r\n                        </ul>\r\n                    <div>\r\n                        <CommentForm dishId={dishId} postComment={postComment} />\r\n                        \r\n                    </div>\r\n                </div>  \r\n            );\r\n        }\r\n        else \r\n            return(\r\n                <div></div>\r\n            );\r\n    }\r\n\r\n    const DishDetail = (props) => {\r\n        //console.log(props.comments);\r\n        if (props.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dish != null) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>{props.dish.name}</h3>\r\n                            <hr />\r\n                        </div>                \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-5 m-1\">\r\n                            <RenderDish dish={props.dish} />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderComments comments={props.comments}\r\n                                        postComment={props.postComment}\r\n                                        dishId={props.dish.id}\r\n                                    />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n            return(\r\n                <div></div>\r\n            );\r\n        \r\n    }\r\nexport default DishDetail;\r\n","F:\\Coursera\\React\\my-app\\src\\components\\MenuComponent.js",[],"F:\\Coursera\\React\\my-app\\src\\components\\HeaderComponent.js",[],"F:\\Coursera\\React\\my-app\\src\\redux\\dishes.js",[],"F:\\Coursera\\React\\my-app\\src\\components\\FooterComponent.js",[],"F:\\Coursera\\React\\my-app\\src\\redux\\leaders.js",[],"F:\\Coursera\\React\\my-app\\src\\redux\\forms.js",[],"F:\\Coursera\\React\\my-app\\src\\redux\\comments.js",[],"F:\\Coursera\\React\\my-app\\src\\redux\\promotions.js",[],"F:\\Coursera\\React\\my-app\\src\\redux\\ActionCreators.js",[],"F:\\Coursera\\React\\my-app\\src\\components\\AboutComponent.js",[],"F:\\Coursera\\React\\my-app\\src\\components\\LoadingComponent.js",[],"F:\\Coursera\\React\\my-app\\src\\redux\\ActionTypes.js",[],"F:\\Coursera\\React\\my-app\\src\\shared\\baseUrl.js",[],"F:\\Coursera\\React\\my-app\\src\\shared\\leaders.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":34,"column":3,"nodeType":"116","messageId":"117","endLine":36,"endColumn":4},{"ruleId":"118","severity":1,"message":"119","line":5,"column":33,"nodeType":"120","messageId":"121","endLine":5,"endColumn":40},{"ruleId":"122","severity":1,"message":"123","line":60,"column":29,"nodeType":"124","endLine":60,"endColumn":80},{"ruleId":"125","severity":1,"message":"126","line":74,"column":37,"nodeType":"124","endLine":80,"endColumn":44},{"ruleId":"125","severity":1,"message":"126","line":96,"column":37,"nodeType":"124","endLine":102,"endColumn":44},{"ruleId":"125","severity":1,"message":"126","line":118,"column":37,"nodeType":"124","endLine":124,"endColumn":44},{"ruleId":"125","severity":1,"message":"126","line":141,"column":37,"nodeType":"124","endLine":147,"endColumn":44},{"ruleId":"125","severity":1,"message":"127","line":163,"column":45,"nodeType":"124","endLine":165,"endColumn":52},{"ruleId":"125","severity":1,"message":"128","line":171,"column":37,"nodeType":"124","endLine":172,"endColumn":66},{"ruleId":"125","severity":1,"message":"129","line":181,"column":37,"nodeType":"124","endLine":183,"endColumn":68},{"ruleId":"118","severity":1,"message":"130","line":3,"column":57,"nodeType":"120","messageId":"121","endLine":3,"endColumn":60},{"ruleId":"125","severity":1,"message":"128","line":50,"column":37,"nodeType":"124","endLine":51,"endColumn":71},{"ruleId":"125","severity":1,"message":"126","line":61,"column":37,"nodeType":"124","endLine":67,"endColumn":43},{"ruleId":"125","severity":1,"message":"129","line":80,"column":37,"nodeType":"124","endLine":82,"endColumn":73},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'Col' is defined but never used.","no-global-assign","no-unsafe-negation"]